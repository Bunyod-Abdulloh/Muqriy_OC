from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext

from handlers.users.ilmiysuhbatlar_hr import CHANNEL_ID
from keyboards.default.ilmiysuhbatlar_dk import is1_dk, allk
from keyboards.inline.ilmiy_suhbatlar_harxil import tort_suhbat_video, tort_suhbat_audio, ilm_suhbat_inkeys
from states.toplam_states import TortToplam

from loader import dp, bot


async def tort_suhbatlar():
    text = '1. "–ö–æ–º–ø–∞—Å - –ª–∏–¥–µ—Ä–ª–∞—Ä –∞–∫–∞–¥–µ–º–∏—è—Å–∏"–¥–∞ "–û–∏–ª–∞–≤–∏–π –º—É–Ω–æ—Å–∞–±–∞—Ç–ª–∞—Ä" –º–∞–≤–∑—É—Å–∏–¥–∞ —Ç–∞—à–∫–∏–ª —ç—Ç–∏–ª–≥–∞–Ω —Å—É“≥–±–∞—Ç' \
           '\n\n2. ¬´–ö–∏—Ç–æ–±—Ö–æ–Ω–ª–∏–∫ –º–∞–∫—Ç–∞–±–∏¬ª –ª–æ–π–∏“≥–∞—Å–∏–Ω–∏–Ω–≥ –º–∞—Ö—Å—É—Å —Å–æ–Ω–∏ —á–∞“õ–∏—Ä—É–≤ —Ö–∞—Ç–º–æ–Ω–∞—Å–∏' \
           '\n\n3. –†–∞–¥–∏–∫–∞–ª –∞—Ç–µ–∏—Å—Ç–ª–∞—Ä, —Ñ–µ–º–∏–Ω–∏–∑–º, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º, –≥–µ–Ω–¥–µ—Ä —Ç–µ–Ω–≥–ª–∏–≥–∏ –≤–∞ –∂–æ“≥–∏–ª –º—É—Å—É–ª–º–æ–Ω–ª–∞—Ä.' \
           '\n\n4. –ò—Å–ª–æ–º–¥–∞ “≥–∞–º–∂–∏“≥–∞—Ç–ª–∏–∫ —Ç–∏–Ω—á–ª–∏–∫ –≥–∞—Ä–æ–≤–∏.' \
           '\n\n5. "–ú—É–Ω–æ—Å–∏–± –±–µ–∫–∞ —Ç–∞–π—ë—Ä–ª–∞—à –≤–∞ —É–ª–∞—Ä–Ω–∏ –∂–∞–º–∏—è—Ç–≥–∞ —Ç–∞“õ–¥–∏–º —ç—Ç–∏—à"' \
           '\n\n6. –°–°–°–† —Ç–∞“õ–∏“õ–ª–∞–≥–∞–Ω –∏–±–æ–¥–∞—Ç. “≤–∞—Å–∞–Ω—Ö–æ–Ω –Ø“≥—ë –ê–±–¥—É–ª–º–∞–∂–∏–¥ –≤–∞ –û–ª–∏–º–∂–æ–Ω “í—É–ª–æ–º–æ–≤ –±–∏–ª–∞–Ω | "Fikrat"' \
           '\n\n7. –ò—Å–ª–æ–º —Ç—û“ì—Ä–∏ —û—Ä–≥–∞–Ω–∏–ª—Å–∞, “≥–∞–º–º–∞ –∑–∞–º–æ–Ω–≥–∞ –º–æ—Å –∫–µ–ª–∞–¥–∏. 13 —ë—à–∏–¥–∞ “õ–æ—Ä–∏ –±—û–ª–≥–∞–Ω “õ–æ—Ä–∏ –±–∏–ª–∞–Ω —Å—É“≥–±–∞—Ç.' \
           '\n\n8. –ê—Ä–∞–± —Ç–∏–ª–∏ –≤–∞ —ç—Å–∫–∏ —û–∑–±–µ–∫ —ë–∑—É–≤–∏–Ω–∏ —û—Ä–≥–∞–Ω–∏—à–Ω–∏–Ω–≥ –∞“≥–∞–º–∏—è—Ç–∏' \
           '\n\n9. –ë–∏–ª–≥–∞–Ω–ª–∞—Ä –±–∏–ª–∞–Ω –±–∏–ª–º–∞–≥–∞–Ω–ª–∞—Ä —Ç–µ–Ω–≥ –±—û–ª–∞–¥–∏–º–∏? "–ù–∞–∂–æ—Ç –¢–∞—ä–ª–∏–º" —û“õ—É–≤ –º–∞—Ä–∫–∞–∑–∏–¥–∞ –±—û–ª–∏–± —û—Ç–≥–∞–Ω —Å—É“≥–±–∞—Ç' \
           '\n\n10. "–†–∞—Å—É–ª—É–ª–ª–æ“≥ - —É–ª—É“ì –Ω–µ—ä–º–∞—Ç" ¬´–®–∞–π—Ö –ú—É“≥–∞–º–º–∞–¥ –°–æ–¥–∏“õ –ú—É“≥–∞–º–º–∞–¥ –Æ—Å—É—Ñ¬ª –º–∞—Å–∂–∏–¥–∏–¥–∞ –±—û–ª–∏–± —û—Ç–≥–∞–Ω –∏–ª–º–∏–π —Å—É“≥–±–∞—Ç'
    return text


@dp.message_handler(state="tortt")
async def jonlifunc(msg: Message, state: FSMContext):
    if msg.text == "‚èÆ –û–ª–¥–∏–Ω–≥–∏":
        await msg.answer("‚èÆ –û–ª–¥–∏–Ω–≥–∏",
                         reply_markup=await is1_dk())
        await state.set_state("ilmsuh")
    elif msg.text == "üé¨ –í–∏–¥–µ–æ":
        await msg.answer(text=await tort_suhbatlar(), reply_markup=await ilm_suhbat_inkeys(torttoplam=True))
        message = await msg.answer('–í–∏–¥–µ–æ', reply_markup=ReplyKeyboardRemove())
        await message.delete()
        await TortToplam.video_one.set()

    elif msg.text == "üéß Ay–¥–∏o":
        await msg.answer(text=await tort_suhbatlar(), reply_markup=await ilm_suhbat_inkeys(torttoplam=True))
        message = await msg.answer('–ê—É–¥–∏–æ', reply_markup=ReplyKeyboardRemove())
        await message.delete()
        await TortToplam.audio_one.set()


@dp.callback_query_handler(state=TortToplam.video_one)
async def tort_video_one(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
        if call.data in tort_suhbat_video.keys():
            await bot.copy_message(chat_id=call.from_user.id, from_chat_id=CHANNEL_ID,
                                   message_id=tort_suhbat_video[call.data],
                                   reply_markup=await ilm_suhbat_inkeys(back=True))
            await TortToplam.video_two.set()
        elif call.data == 'back_tash_suh2':
            await call.message.answer('‚¨Ö –û—Ä—Ç–≥–∞', reply_markup=allk)
            await state.set_state("tortt")
    except Exception:
        pass


@dp.callback_query_handler(state=TortToplam.video_two)
async def torttoplam_video_two(call: CallbackQuery):
    try:
        await call.message.delete()
        if call.data == 'back_tash_suh1':
            await call.message.answer(text=await tort_suhbatlar(), reply_markup=await ilm_suhbat_inkeys(
                torttoplam=True))
            await TortToplam.video_one.set()
    except Exception:
        pass


@dp.callback_query_handler(state=TortToplam.audio_one)
async def torttoplam_audio_one(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
        if call.data in tort_suhbat_audio.keys():
            await bot.copy_message(chat_id=call.from_user.id, from_chat_id=CHANNEL_ID,
                                   message_id=tort_suhbat_audio[call.data],
                                   reply_markup=await ilm_suhbat_inkeys(back=True))
            await TortToplam.audio_two.set()
        elif call.data == 'back_tash_suh2':
            await call.message.answer('‚¨Ö –û—Ä—Ç–≥–∞', reply_markup=allk)
            await state.set_state("tortt")
    except Exception:
        pass


@dp.callback_query_handler(state=TortToplam.audio_two)
async def torttoplam_audio_two(call: CallbackQuery):
    try:
        await call.message.delete()
        if call.data == 'back_tash_suh1':
            await call.message.answer(text=await tort_suhbatlar(), reply_markup=await ilm_suhbat_inkeys(torttoplam=True))
            await TortToplam.audio_one.set()
    except Exception:
        pass
